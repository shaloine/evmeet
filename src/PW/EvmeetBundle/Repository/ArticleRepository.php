<?php

namespace PW\EvmeetBundle\Repository;

use \DateTime;
use DateTimeZone;

use PW\EvmeetBundle\Entity\Filter;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends \Doctrine\ORM\EntityRepository
{

	public function classicFind()
	{
		$date_now = new DateTime('NOW' ,new DateTimeZone('Europe/Paris'));
		$date_now->setTime(0, 0, 0);

		$qb =  $this->createQueryBuilder('a');

		$qb
		->where('a.dateInvitation >= :date')
		->setParameter('date', $date_now)
		->orderBy('a.dateInvitation', 'ASC')
		;

		return $qb
		->getQuery()
		->getResult()
		;
	}

	public function complexFind(filter $filter)
	{
		$date_now = new DateTime('NOW' ,new DateTimeZone('Europe/Paris'));
		$date_now->setTime(0, 0, 0);

		$qb =  $this->createQueryBuilder('a');

		if($filter->getLieu()){
			$qb
			->andWhere('a.lieu = :lieu')
			->setParameter('lieu', $filter->getLieu())
			;
		}

		if($filter->getDateInvitation()){
			$mindate = $filter->getDateInvitation()->format('Y-m-d 00:00:00');
			$maxdate = $filter->getDateInvitation()->format('Y-m-d 23:59:59');
			
			$qb
			->andWhere('a.dateInvitation BETWEEN :datemin AND :datemax')
			->setParameter('datemin', $mindate)
			->setParameter('datemax', $maxdate)
			->orderBy('a.dateInvitation', 'ASC')
			;
		} else {
			$qb
			->andWhere('a.dateInvitation >= :date')
			->setParameter('date', $date_now)
			->orderBy('a.dateInvitation', 'ASC')
			;
		}

		if($filter->getNiveau()){
			$qb
			->andWhere('a.niveauMin <= :niveau')
			->setParameter('niveau', $filter->getNiveau())
			->andWhere('a.niveauMax >= :niveau')
			->setParameter('niveau', $filter->getNiveau())
			;
		}
		

		return $qb
		->getQuery()
		->getResult()
		;
	}
}
